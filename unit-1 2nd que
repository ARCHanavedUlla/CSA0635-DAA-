#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* reverseKGroup(struct ListNode* head, int k) {
    struct ListNode *current = head;
    struct ListNode *next = NULL;
    struct ListNode *prev = NULL;
    int count = 0;

    struct ListNode *temp = head;
    while (temp != NULL && count < k) {
        temp = temp->next;
        count++;
    }

    if (count == k) {
        while (current != NULL && count > 0) {
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
            count--;
        }

        if (next != NULL) {
            head->next = reverseKGroup(next, k);
        }
        return prev;
    }

    return head;
}

void printList(struct ListNode *head) {
    while (head != NULL) {
        printf("%d ", head->val);
        head = head->next;
    }
    printf("\n");
}
struct ListNode* createNode(int value) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = value;
    newNode->next = NULL;
    return newNode;
}

int main() {
    struct ListNode* head = createNode(1);
    head->next = createNode(2);
    head->next->next = createNode(3);
    head->next->next->next = createNode(4);
    head->next->next->next->next = createNode(5);

    int k = 2;

    printf("Original linked list: ");
    printList(head);

    head = reverseKGroup(head, k);

    printf("Modified linked list after reversing in groups of %d: ", k);
    printList(head);

    return 0;
}
